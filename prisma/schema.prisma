// This is your Prisma schema file
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(MEMBER)
  ideas         Idea[]    @relation("CreatedIdeas")
  votes         IdeaVote[]
  comments      Comment[]
  tasks         Task[]    @relation("AssignedTasks")
  createdTasks  Task[]    @relation("CreatedTasks")
  meetings      Meeting[] @relation("MeetingParticipants")
  projects      Project[] @relation("ProjectMembers")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum UserRole {
  ADMIN
  MANAGER
  MEMBER
}

model Idea {
  id          String     @id @default(cuid())
  title       String
  description String
  type        String
  budget      Float?
  objectives  String[]
  status      IdeaStatus @default(PENDING)
  creator     User       @relation("CreatedIdeas", fields: [creatorId], references: [id])
  creatorId   String
  votes       IdeaVote[]
  comments    Comment[]
  tasks       Task[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

enum IdeaStatus {
  PENDING
  APPROVED
  REJECTED
  ARCHIVED
}

model IdeaVote {
  id        String   @id @default(cuid())
  idea      Idea     @relation(fields: [ideaId], references: [id])
  ideaId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  vote      Boolean
  createdAt DateTime @default(now())

  @@unique([ideaId, userId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  idea      Idea     @relation(fields: [ideaId], references: [id])
  ideaId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Meeting {
  id          String        @id @default(cuid())
  title       String
  agenda      String
  date        DateTime
  status      MeetingStatus @default(PLANNED)
  participants User[]       @relation("MeetingParticipants")
  tasks       Task[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum MeetingStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Project {
  id          String        @id @default(cuid())
  title       String
  description String
  status      ProjectStatus @default(PLANNING)
  team        User[]        @relation("ProjectMembers")
  tasks       Task[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum ProjectStatus {
  PLANNING
  DESIGN
  MARKETING
  EXECUTION
  COMPLETED
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String
  status      TaskStatus @default(PENDING)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  evidence    String?
  recurring   Boolean    @default(false)
  frequency   String?
  assignedTo  User       @relation("AssignedTasks", fields: [assignedToId], references: [id])
  assignedToId String
  creator     User       @relation("CreatedTasks", fields: [creatorId], references: [id])
  creatorId   String
  idea        Idea?      @relation(fields: [ideaId], references: [id])
  ideaId      String?
  meeting     Meeting?   @relation(fields: [meetingId], references: [id])
  meetingId   String?
  project     Project?   @relation(fields: [projectId], references: [id])
  projectId   String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}